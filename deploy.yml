- hosts: emr-service
  remote_user: root
  vars:
    keycloak_realm: demo
    emrservice_docker_image: nexus3.inspq.qc.ca:5000/inspq/emr-service
    emrservice_oidc_client_id: "{{ emrservice_container_name | default('emrservice') }}"
    emrservice_oidc_client_name: Emr-Service
    emrservice_oidc_client_description: Demo API app for offline access
    emrservice_internal_port: 8082
    emrservice_actuator_internal_port: 8081
    emrservice_oidc_client_redirect_uris:
      - "{{ emrservice_url }}"
      - "{{ emrservice_url }}/*"
      - "http://localhost:{{ emrservice_external_port }}"
      - "http://localhost:{{ emrservice_external_port }}/*"
    emrservice_keycloak_roles:
      - name: user
        description: "EMR Service User"
        composite: false
    emrservice_publications_endpoint: "{{ emrservice_url }}/emr/publications"
    emrweb_docker_image: nexus3.inspq.qc.ca:5000/inspq/emr-web
    emrweb_oidc_client_id: "{{ emrweb_container_name | default('emrweb') }}"
    emrweb_oidc_client_name: Emr-Web
    emrweb_oidc_client_description: Demo Web app for offline access
    emrweb_internal_port: 8083
    emrweb_oidc_client_redirect_uris:
      - "{{ emrweb_url }}"
      - "{{ emrweb_url }}/*"
      - "http://localhost:{{ emrweb_external_port }}"
      - "http://localhost:{{ emrweb_external_port }}/*"
    emrweb_keycloak_roles:
      - name: user
        description: "EMR Service User"
        composite: false
    docker_image_version: latest
    keycloak_roles:
    - name: user
      realm: "{{ keycloak_realm | default ('master') }}"
      description: "Offline POC User Role"
      composite: false
  tasks:
  - name: Login to Keycloak
    uri:
      url: "{{ keycloak_url }}/auth/realms/master/protocol/openid-connect/token"
      method: POST
      body_format: raw
      body:
        client_id=admin-cli&username={{ keycloak_user }}&password={{ keycloak_password }}&grant_type=password
    register: keycloak_token
    
  - name: Register Token
    set_fact:
      keycloak_access_token: "{{ keycloak_token.json.access_token }}"

  - name: Does demo realm already exist
    uri:
      url: "{{ keycloak_url }}/auth/admin/realms/{{ keycloak_realm }}"
      headers:
        Authorization: Bearer {{ keycloak_access_token }}
      method: GET
    register: demo_realm
    ignore_errors: True

  - name: Copy realm demo realm json file
    copy:
      src: demo-realm.json
      dest: /tmp/demo-realm.json
    when: demo_realm.status == 404
    
  - name: Create demo realm if it does not exist
    uri:
      url: "{{ keycloak_url }}/auth/admin/realms/"
      headers:
        Authorization: Bearer {{ keycloak_access_token }}
      method: POST
      body_format: json
      body: "{{ lookup('file','/tmp/demo-realm.json') }}"
      status_code: 201
    when: demo_realm.status == 404
      
  - name: Create Realm roles
    keycloak_role: 
      realm: "{{ item.realm | default ('master') }}"
      url: "{{ keycloak_url }}"
      username: "{{ keycloak_user }}"
      password: "{{ keycloak_password }}"
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      composite: "{{ item.composite | default(false) }}"
      composites: "{{ item.composites | default(omit) }}"
      state: present
    with_items: "{{ keycloak_roles }}"
    register: roles
    when: keycloak_roles is defined
    run_once: true

  - name: Create API Keycloak client
    keycloak_client:
      url: "{{ keycloak_url }}"
      username: "{{ keycloak_user }}"
      password: "{{ keycloak_password }}"
      realm: "{{ keycloak_realm | default ('master') }}"
      clientId: "{{ emrservice_oidc_client_id }}"
      name: "{{ emrservice_oidc_client_name }}"
      description: "{{ emrservice_oidc_client_description }}"
      redirectUris : "{{ emrservice_oidc_client_redirect_uris }}"
      webOrigins: "{{ emrservice_oidc_client_webOrigins | default([]) }}"
      directAccessGrantsEnabled: true
      roles: "{{ emrservice_keycloak_roles | default([])}}"
    register: emrservice_keycloak_client
    when:  keycloak_url is defined and keycloak_user is defined and keycloak_password is defined
    run_once: true

  - name: Retrieve the API client secret
    set_fact:
      emrservice_oidc_client_secret: "{{emrservice_keycloak_client.ansible_facts.clientSecret.value}}"
    when:  emrservice_keycloak_client is defined
    run_once: true

  - name: Create API Docker container 
    docker_container:
      name: "{{ emrservice_container_name | default('emrservice') }}"
      hostname: "{{ emrservice_container_name | default('emrservice') }}"      
      image: "{{ emrservice_docker_image }}:{{ docker_image_version }}"
      state: started
      restart_policy: unless-stopped
      ports:
      - "{{ emrservice_external_port }}:{{ emrservice_internal_port }}"
      - "{{ emrservice_actuator_external_port }}:{{ emrservice_actuator_internal_port }}"
      env:
        "KEYCLOAK_URL": "{{ keycloak_url }}"
        "KEYCLOAK_REALM": "{{ keycloak_realm }}"
        "KEYCLOAK_CLIENT_ID": "{{ emrservice_oidc_client_id }}"
        "KEYCLOAK_CLIENT_SECRET": "{{ emrservice_oidc_client_secret }}"
        "KEYCLOAK_ENABLED": "{{ keycloak_enabled | default(True) }}"
        "DEBUG_PORT": "{{ debug_port | default(0) }}"
  
  - name: Create Web Keycloak client
    keycloak_client:
      url: "{{ keycloak_url }}"
      username: "{{ keycloak_user }}"
      password: "{{ keycloak_password }}"
      realm: "{{ keycloak_realm | default ('master') }}"
      clientId: "{{ emrweb_oidc_client_id }}"
      name: "{{ emrweb_oidc_client_name }}"
      description: "{{ emrweb_oidc_client_description }}"
      redirectUris : "{{ emrweb_oidc_client_redirect_uris }}"
      webOrigins: "{{ emrweb_oidc_client_webOrigins | default([]) }}"
      directAccessGrantsEnabled: True
      #publicClient: True
      roles: "{{ emrweb_keycloak_roles | default([]) }}"
    register: emrweb_keycloak_client
    when:  keycloak_url is defined and keycloak_user is defined and keycloak_password is defined
    run_once: true

  - name: Retrieve the WEB client secret
    set_fact:
      emrweb_oidc_client_secret: "{{emrweb_keycloak_client.ansible_facts.clientSecret.value}}"
    when:  emrweb_keycloak_client is defined
    run_once: true

  - name: Create Web Docker container 
    docker_container:
      name: "{{ emrweb_container_name | default('emrweb') }}"
      hostname: "{{ emrweb_container_name | default('emrweb') }}"      
      image: "{{ emrweb_docker_image }}:{{ docker_image_version }}"
      state: started
      restart_policy: unless-stopped
      ports:
      - "{{ emrweb_external_port }}:{{ emrweb_internal_port }}"
      env:
        "KEYCLOAK_URL": "{{ keycloak_url }}"
        "KEYCLOAK_REALM": "{{ keycloak_realm }}"
        "KEYCLOAK_CLIENT_ID": "{{ emrweb_oidc_client_id | default('emrweb') }}"
        "KEYCLOAK_CLIENT_SECRET": "{{ emrweb_oidc_client_secret }}"
        "KEYCLOAK_ENABLED": "{{ keycloak_enabled | default(True) }}"
        "DEBUG_PORT": "{{ debug_port | default(0) }}"
        "EMR_SERVICE_PUBLICATIONS_ENDPOINT": "{{ emrservice_publications_endpoint | default('http://localhost:8082/emr/publications') }}"
        
  